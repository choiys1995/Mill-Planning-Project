# 이 라인은 주석입니다.
# 문서작성자 : 최영재
openapi: "3.0.0"
info:
  description: |
    프론트엔드, 백엔드로 작업을 하다보면 데이터가 송, 수신되는데 이 과정에서 서로가 필요한 데이터를 정확히 모르기 때문에
    이에 대한 사항을 문서로 남겨놓고자 해당 문서를 작성한다
  version: 1.1.0
  title: Mill-Planning
  termsOfService: https://github.com/ece5074/Mill-Planning-Project
  contact:
    email: ece5074@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# - http
# parameter에 대한 부분을 명세
# in: path, body, header, query 의 형태를 주로 사용
# 순서는 상관없는듯?
# name: 변수명
# type: 데이터 타입의 명시
# schema $ref: 밑 부분의 model 작성을 통해 참조
paths:
  #테스트
  /api/test/{message}:
    get:
      summary: 테스트
      parameters:
        - $ref: 'parameters.yaml#/test'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/test"
        '418':
          description: "나는 커피를 끓이는것을 원치않는다 아이스아메리카노를 가져와라"

  ###############################가게######################################
  #가게 생성
  /api/store/:
    post:
      summary: "가게 생성(관리자)"
      requestBody:
        $ref: 'requestBody/store.yaml'
      
      responses:
        '201':
          description: "해당 사용자의 가게가 생성되었음을 알림"
        default:
          $ref: 'responses/error.yaml'

  #가게 검색
  /api/store/search:
    get:
      summary: "가게 검색"
      parameters:
      - $ref: 'parameters.yaml#/search_store_main'
      - $ref: 'parameters.yaml#/search_store_detail'
          
      responses:
        '200':
          description: 다음의 값이 배열로 전송
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/stores"
        default:
          $ref: 'responses/error.yaml'

  
  #가게 조회(페이지 정보 요청)
  /api/store/{storeid}:
    get:
      summary: "가게 조회(가게 페이지에서 정보요청)"
      parameters:
      - $ref: 'parameters.yaml#/index_store'
      responses:
        '200':
          description: "다음의 값이 전송, 입력받은값이 없는경우엔 배열로 목록을 전송"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/stores"
        default:
          $ref: 'responses/error.yaml'
    
    patch:
      summary: 가게 수정( 가게 관리자 로그인 체크 )
      parameters:
      - $ref: 'parameters.yaml#/index_store'
      requestBody:
        $ref: 'requestBody/store.yaml'
        
      responses:
        '204':
          description: "가게 정보가 수정되었음을 알림"
        default:
          $ref: 'responses/error.yaml'
    delete:
      summary: "가게 삭제 ( 가게 관리자 로그인 체크 )"
      parameters:
      - $ref: 'parameters.yaml#/index_store'
      responses:
        '204':
          description: "해당 가게가 삭제되었음을 알림(전송값 없음)"
        default:
          $ref: 'responses/error.yaml'

  #가게 조회(가게 관리자)
  /api/ad-store:
    get:
      summary: "소유한 가게를 조회 ( 가게 관리자 로그인 체크 )"
      responses:
        '200':
          description: "다음의 값이 배열로 전송"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/stores"
        default:
          $ref: 'responses/error.yaml'

  ##############################유저 또는 가게 관리자 계정관련#############################

  #로그인
  /api/auth/login:
    post:
      summary: 로그인(사용자)
      requestBody:
        $ref: 'requestBody/localLogin.yaml'
      responses: 
        '200':
          description: 로그인에 성공했음을 알리고 토큰을 전송
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/login_success"
        default:
          $ref: 'responses/error.yaml'

  #카카오 oAuth 로그인
  /api/auth/oauth/kakao:
    get:
      summary: 카카오 계정 로그인(사용자)
      responses:
        '200':
          description: 이미 가입되었다면 로그인, 가입되지않았다면 회원가입되었음을 알림
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/login_success"
        default:
          $ref: 'responses/error.yaml'

  #회원가입
  /api/customers/register:
    post:
      summary: 회원가입
      parameters:
      - in: body
        name: customer register
        required: true
        schema:
          $ref: "schemas.yaml#/register_customer"
      responses: 
        '201':
          description: "회원가입이 성공적으로 진행되었음을 알림"
        default:
          $ref: 'responses/error.yaml'
    
  # 가게 관리자 로그인
  /api/auth/ad-login:
    post:
      summary: 가게 관리자 로그인
      requestBody:
        $ref: 'requestBody/localLogin.yaml'
      responses: 
        '200':
          description: 관리자가 로그인에 성공했음을 알리고 client에 access_token을 보내고 session에 토큰 저장
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/login_success"
        default:
          $ref: 'responses/error.yaml'
  
  #가게 관리자 회원가입
  /api/owner/register:
    post:
      summary: 회원가입(가게 관리자)
      parameters:
      - in: body
        name: customer register
        required: true
        schema:
          $ref: "schemas.yaml#/register_owner"
      responses: 
        '201':
          description: "관리자의 회원가입이 성공적으로 진행되었음을 알림"
        default:
          $ref: 'responses/error.yaml'


  
  ###########################예약관련##################################

  #예약 가게 정보확인
  /api/customers/reserve/payment/{storeid}:
    post:
      summary: "예약 정보 확인"
      parameters:
      - $ref: "parameters.yaml#/index_store"
        required: true
      responses:
        schema:
          $ref: "schemas.yaml#/store"

  #새로운 예약
  /api/customers/reserve/{storeid}:
    post:
      summary: "예약 하기"
      parameters:
      - $ref: "parameters.yaml#/index_store"
        required: true
      - in : body
        name: reserve_data
        required: true
        schema:
          $ref: "schemas.yaml#/new_reservation"
      responses:
        '201':
          description: "예약에 성공헀고 영수증데이터를 불러옴"
          content:
            application/json:
              schema:
              - $ref: "schemas.yaml#/receipt"
              - $ref: "schamas.yaml#/payment"
        default:
          $ref: 'responses/error.yaml'
    # 예약취소(사용자)
    patch:
      summary: "예약 취소"
      parameters:
      - in : path
        name: "storeid"
        required: true
        type: "integer"
      responses:
        '204':
          description: "예약 취소에 성공했음"
        default:
          $ref: 'responses/error.yaml'
      

  #나의 예약현황(유저)
  /api/customers/reserve:
    get:
      summary: "유저 예약 현황"
      parameters:
      responses:
        '200':
          dsecription: "현재 로그인된 사용자의 예약 현황을 불러옴"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/reservation"
        default:
          $ref: 'responses/error.yaml'
  
  #나의 이전 예약현황(유저)
  /api/customers/reserve/old:
    get:
      summary: "유저 이전 예약 현황"
      parameters:
      responses:
        '200':
          description: "현재 로그인된 사용자의 현재 날짜 이전부터 3개월전의 예약 현황을 불러옴"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/reservation"
        default:
          $ref: 'responses/error.yaml'
      

  #내 가게 예약현황(가게 가게 관리자)
  /api/owners/reserve/{storeid}:
    get:
      summary: "가게 관리자 가게 예약 현황"
      parameters:
      - in: path
        name: storeid
      responses:
        '200':
          description: "현재 로그인된 가게 관리자의 예약 현황을 불러줌(storeid가 입력된경우 해당 storeid에 대한 예약만)"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/reservation"
        default:
          $ref: 'responses/error.yaml'
    
    #예약취소(가게 관리자)
    delete:
      summary: "가게 관리자 예약 취소"
      parameters:
      - in : path
        name: storeid
      responses:
        '204':
          description: "예약취소 되었음을 알리고 페이지 새로고침"
        default:
          $ref: 'responses/error.yaml'

  #가게 예약 현황
  /api/reserve/{storeid}:
    get:
      summary: "가게 예약 현황"
      parameters:
      - in: path
        name: storeid
        required: true
      responses:
        '200':
          description: "path에 입력받은 데이터로 해당 가게의 예약 현황을 배열로 전달"
          schema:
            #$ref: "schemas.yaml#/reservation"
            type: "object"
            properties:
              reservedate:
                description: "예약날짜"
              reservetime:
                description: "예약시간"
            example:
              reservedate: "20201225"
              reservetime: "18:00:00"
        default:
          $ref: 'responses/error.yaml'


    #리뷰 작성
  /api/store/{storeid}/review:
    get:
      summary: "리뷰 조회"
      parameters:
        - in: path
          name: "storeid"
          required: true
      responses:
        '200': 
          description: "리뷰 조회내역을 전송"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/reviews"
        default:
          $ref: 'responses/error.yaml'

    post:
      summary: "리뷰 작성"
      parameters:
        - $ref: "parameters.yaml#/index_store"
      requestBody:
        $ref: 'requestBody/review.yaml'
      responses:
        '201':
          description: "리뷰가 성공적으로 생성됨"
        default:
          $ref: 'responses/error.yaml'
